---
title: "Comparison with dplyr"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{Design Motivation}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r, echo = FALSE, message = FALSE, warning = FALSE}
knitr::opts_chunk$set(collapse = TRUE, comment = "#>")
options(width = 80)
set.seed(0)
```

There are an increasing number of data frame packages in R, including
[data.table][data-table] and [dplyr][dplyr]. All provide similar
functionality, but they do so with different user interfaces. To illustrate
some of the differences, this vignette translates the
[dplyr introduction][dplyr-intro] to *frame*.  

```{r}
library(frame)
```

## Data: nycflights13

The [nycflights13][nycflights13] package collects flight information from 2013 for trips
originating or ending in New York City. The package provides the data in the
form of `tibble` objects, but we can easily convert them to datasets using
`as_data`.

```{r}
library(nycflights13)
flights <- as_dataset(flights)
print(flights)
```

There are more rows in this dataset than will fit on the screen.  By default,
then `print` function will only display 20 rows, and only wrap columns at most
twice.  Change the default to another value using the following command:

```{r}
options(frame.rows = 5) # truncate output after 5 rows
options(frame.wrap = 0) # truncate output without wrapping columns
```

*frame* uses the default value of 20 to display as much data as possible
without overflowing the space on a standard console. For the rest of this
vignette, however, we will be demonstrating programming, not data analysis, so
we will truncate the output to 4 rows and no wraps.


```{r}
print(flights)
```

You can get information about the column types using the `schema` function,
which itself returns a `dataset`:

```{r}
schema(flights)
```

This is one example where we would like to see more rows than displayed by our
newly-specified default (5). Display all rows of the result by specifying a
negative value for the truncation limit:

```{r}
print(schema(flights), -1)
```


## Single table actions

Dplyr provides a set of "verbs" for working with data sets. We do not provide
analogues for most of them, but often it is possible to use functions built in
to R to achieve their same results.

### Filter rows with `subset()`

Use the `subset` command (part of base R) to select certain rows:

```{r}
subset(flights, month == 1 & day == 1)
```

This is analogous to `dplyr::filter()`.


### Arrange rows with `reorder()`

Use `reorder()` to arrange rows, using the first argument and then breaking
ties according to subsequent arguments.


```{r}
reorder(flights, year, month, day)
```

This is analogous to `dplyr::arrange()`.

Use a named argument (`"desc")` to order in descending order.

```{r}
reorder(flights, desc = arr_delay)
```

You can specify multiple descending columns if you'd like:

```{r}
# descending arr_delay, distance; ascending day
reorder(flights,
        desc = arr_delay,
        desc = distance,
        day)
```


### Select columns with `[` or `subset()`

Use the subscript operator `[` or the `subset()` function to select columns:

```{r}
flights[c("year", "month", "day")]
subset(flights, select = c(year, month, day))
```

You can specify columns using a numerical index, or a set of indices; use
negative indices to exclude columns.

```{r}
flights[1:3]
flights[-(1:3)] # exclude 1:3
```

If you don't know the index of a column, you can get it like with the base R
`match` function:

```{r}
match("day", names(flights))
```

With `subset()`, you can specify ranges in terms of the names themselves, 

```{r}
subset(fligths, select = year:day)
subset(flights, select = -(year:day)) # exclude year:day
```

These functions are analogous to `dplyr::select()`.


### Add new columns with transform()

Use the `transform` function from base R to add new columns:

```{r}
transform(flights,
    gain = arr_delay - dep_delay,
    speed = distance / air_time * 60
)
```

This is similar to `dplyr::mutate`, but it does not evaluate columns
sequentially. If you need sequential modifications, use `within()`:

```{r}
within(flights, {
    gain <- arr_delay - dep_delay
    gain_per_hour <- gain / (air_time / 60)
})
```

If you only want to keep the new variables, use `with()` and return a
dataset.

```{r}
with(flights, {
    gain <- arr_delay - dep_delay
    gain_per_hour <- gain / (air_time / 60)
    dataset(gain, gain_per_hour)
})
```

### Summarize values with `with()`

The `with()` command can also be used to summarize data:

```{r}
with(flights, {
    mean(dep_delay, na.rm = TRUE)
})
```

This is analogous to `dplyr::summarise()`.


### Randomly sample rows with `sample()`

There are no direct analogues to *dplyr* `dplyr::sample_n()` and
`dplyr::sample_frac()`, but you can get a random sample of the rows, use the
`sample()` function. Use `sample()` to choose a random set of row indices, and
then select these with the subset operator:

```{r}
# sample 10 rows
flights[sample(nrow(flights), 10), ]
```

Use `replace = TRUE` to sample with replacement, as for a bootstrap sample.

```{r}
# get a bootstrap sample
flights[sample(nrow(flights), replace = TRUE), ]
```


### Grouped operations

Use the `grouped()` command to perform an operation on a set of groups
defined by the unique levels of one or more variables:

```{r}
delay <- grouped(flights, "tailnum", function(x) {
    list(count = nrow(x),
         dist = mean(x$distance, na.rm = TRUE),
         delay = mean(x$arr_delay, na.rm = TRUE))
})

(delay <- subset(delay, count > 20 & dist < 2000))
```

The `grouped()` command acts as a combination of `dplyr::group_by()` and
`dplyr::summarise()`. To group the rows but not perform any computation,
leave the operation specified:

```{r}
grouped(flights, "tailnum")
```

Here the result is a `dataset`  with keys taken from the `tailnum` variable.
The dataset has a single column: a list of the groups.

Here's how to find the number of planes and the number of flights that go to
each possible destination:

```{r}
grouped(flights, "dest", function(x) {
    list(planes = length(unique(x$tailnum)),
         flights = nrow(x))
})
```

The grouping variables specified as names must be data variables, not keys. If
you would like to group by a key, do the following instead:

```{r}
# helper functions
count <- function(x) list(flights = nrow(x))
total <- function(x) list(flights = sum(x$flights))

# count daily flights...
(per_day <- grouped(flights, c("year", "month", "day"), count))

# ...then aggregate by month
(per_month <- grouped(per_day, keys(per_day)[c("year", "month")], total))

# ...then aggregate by year
(per_year <- grouped(per_month, keys(per_month)["year"], total))
```


[data-table]: http://r-datatable.com/ "data.table"
[dplyr]: http://dplyr.tidyverse.org/ "dplyr"
[dplyr-intro]: https://cran.r-project.org/package=dplyr/vignettes/dplyr.html "An introduction to dplyr"
[nycflights13]: https://cran.r-project.org/package=nycflights13 "nycflights13"
